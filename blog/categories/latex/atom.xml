<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LaTeX | λaughedelic's blog]]></title>
  <link href="http://laughedelic.github.com/blog/categories/latex/atom.xml" rel="self"/>
  <link href="http://laughedelic.github.com/"/>
  <updated>2013-02-13T23:06:21+01:00</updated>
  <id>http://laughedelic.github.com/</id>
  <author>
    <name><![CDATA[laughedelic]]></name>
    <email><![CDATA[laughedelic@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Про HaTeX 3 и юникод в коде]]></title>
    <link href="http://laughedelic.github.com/blog/2011/10/26/hatex-with-unicode/"/>
    <updated>2011-10-26T02:06:00+02:00</updated>
    <id>http://laughedelic.github.com/blog/2011/10/26/hatex-with-unicode</id>
    <content type="html"><![CDATA[<p><em>(репост из <a href="http://laughedelic.tumblr.com/post/11922293522/hatex-3">tumblr</a>)</em></p>

<h2>Вступление</h2>

<p>Давненько я не заглядывал сюда и не писал ничего содержательного.
Но тут в очередной раз есть повод поделиться впечатлениями от новых интересных знаний и к тому же для этого удалось выкроить немного времени.</p>

<p>Итак, я дождался таки выхода в свет 3й версии библиотеки <a href="http://deltadiaz.blogspot.com/2011/10/hatex-3-first-release.html">HaTeX</a> - предыдущая версия была аж год назад. И за этот год я периодически писал автору, интересуясь, не собирается ли он что-нибудь делать, поскольку предыдущая версия была хороша только как концепт, но слишком далека от идеала и малопригодна для реального применения (хотя я ей всё таки пользовался и надеюсь ещё отдельно рассказать как именно). Хотел даже сам переделать её, но как всегда не хватало времени.</p>

<p>Я кстати <a href="http://laughedelic.tumblr.com/post/5312922803">писал в мае</a> о том как и почему мне нравится HaTeX. Так вот <a href="http://deltadiaz.blogspot.com/2011/09/hatex-3-previous-notes.html">пред-релизное известие</a> о новых концепциях в HaTeX-3 очень меня обрадовало. Главный момент (для меня), в том, что теперь есть специальный <a href="http://hackage.haskell.org/packages/archive/HaTeX/3.0.0/doc/html/Text-LaTeX-Base-Syntax.html#t:LaTeX">алгебраический тип <code>LaTeX</code></a>, с помощью которого конструируются LaTeX-выражения на Haskell'е. Такой подход даёт возможность контролировать валидность получаемых (true-)LaTeX-выражений на выходе.</p>

<!-- more -->


<p>На самом деле это тоже не то, что я хотел, когда говорил о типо-безопасном LaTeX'е, но всё же, лучше, чем было раньше. Я вижу это скорее как класс типов, которые можно представить в форме LaTeX'а, но об этом надо ещё подумать (это мне напомнило <a href="http://laughedelic.tumblr.com/post/11917167041">цитату</a>, по ходу дела).</p>

<h2>Немного об изменениях</h2>

<p>Ладно, ближе к делу. Когда я пользовался HaTeX'ом до 3й версии, я написал для себя небольшое дополнение - там были команды, которых мне не хватало и удобные сокращения. Так вот перед тем как начать пользоваться новой версией, я естественно занялся переделкой этих дополнений для совместимости с ней. На самом деле менять почти ничего не пришлось - в основном только уродские сигнатуры типа <code>foo :: Monad m =&gt; LaTeX m</code> заменились на <code>foo :: LaTeX</code>, что конечно же к лучшему.</p>

<p>Насчёт пропажи (а на самом деле опциональности) монад в новом HaTeX стоит прочитать <a href="http://deltadiaz.blogspot.com/2011/10/hatex-3-two-styles.html">пост автора о двух стилях</a>. Он говорит что новый способ, изобилующий операторами <code>&lt;&gt;</code> для склейки частей <code>LaTeX</code>-выражений не шибко приятен для глаза ("Yes, all these operators seem ugly"), но мне это наоборот больше нравится ") Просто я и в старой версии не всегда пользовался <code>do</code>-нотацией (по формуле/фразе на строчку?), а частенько писал что-то типа (от балды что-то напишу сейчас)</p>

<p>``` haskell</p>

<pre><code>math $ forall &gt;&gt; x &gt;&gt; from &gt;&gt; "S" &gt;&gt; comma &gt;&gt; space &gt;&gt; f^:2.:(x) &gt;&gt; leq &lt;&gt; 0
</code></pre>

<p>```</p>

<p>Что на обычном LaTeX'е означает примерно следующее:</p>

<p>``` latex</p>

<pre><code>$\forall x\in S,\quad f^2(x)\leq 0$
</code></pre>

<p>```</p>

<p>Что может быть выглядит короче, но уж на мой вкус совершенно отвратительно.
А в HaTeX3 это запишется так:</p>

<p>``` haskell</p>

<pre><code>math $ forall &lt;&gt; x &lt;&gt; from &lt;&gt; "S" &lt;&gt; comma &lt;&gt; space &lt;&gt; f^:2.:(x) &lt;&gt; leq &lt;&gt; 0
</code></pre>

<p>```</p>

<p>Во-первых так по-моему лучше (читабельнее), а во вторых, поскольку я пользуюсь <a href="http://b4winckler.wordpress.com/2010/08/07/using-the-conceal-vim-feature-with-latex/">conceal-фишкой</a> в Vim'е, то у меня в нормальном режиме <code>&gt;&gt;</code> заменяется на симпатичную кавычку <code>»</code> (то есть одним символом), а для нового оператора я сделал замену <code>&lt;&gt;</code> на <code>◇</code> (юникодовский символ "white diamond").</p>

<p>И это по-моему прекрасно, потому что код выглядит чисто и чудесно и без всяких там "ugly operators".</p>

<h2>Vim conceal</h2>

<p>Про использование юникодовских символов стоит сказать отдельно. Я не очень люблю conceal в Vim'е, потому что меня раздражает то, что в нормальном режиме всё сворачивается в один символ, но при перемещении он воспринимается как свёрнутая последовательность символов, то есть я тупо натыкаюсь на такой символ, жму вправо 10 раз, а курсор не реагирует. Естественно это приводит к проблемам при копировании/вырезании и т.п. Не понимаю, почему так сделано.</p>

<p>Поэтому conceal'у я оставляю маленькие визуальные украшательства, такие как замена  <code>&lt;&gt;</code> на <code>◇</code> или</p>

<p>``` haskell</p>

<pre><code>(\x -&gt; x == 1) :: Num a =&gt; a -&gt; Bool
</code></pre>

<p>```</p>

<p>на</p>

<p>``` haskell</p>

<pre><code>(λx → x ≡ 1) ∷ Num a ⇒ a → Bool
</code></pre>

<p>```</p>

<p>^__^</p>

<h2>Юникодовские символы для операторов</h2>

<p>В остальном же, я использую юникод для операторов в Haskell'е, благо GHC это поддерживает уже давным давно (можно хоть по-русски функции и типы называть).
Я думаю, любой <strike>правовер</strike> годный редактор позволяет ненапряжно писать, используя юникодовские символы. В Vim'е я делаю это используя функцию IMAP из плагина LaTeX-Suite. Аналогичное можно сделать тысячей других способов и уж точно можно сделать в Emacs/Textmate/Vico. Итак, я пишу в <code>.vimrc</code> cледующую строчку:</p>

<pre><code>call IMAP (";&lt;" , "≤" , "haskell")
</code></pre>

<p>И теперь, при наборе кода<code>;,</code> моментально заменяется на <code>≤</code> - это как ввод иероглифов по их фонетическому эквиваленту (пиньинь вроде называется).
<code>;</code> я использую как префикс, чтобы отличить этот иероглиф (макрос? "/) от обычного ввода символов, поскольку <code>;</code> не используется в Haskell'е (нет, не используется).</p>

<p>Теперь вернёмся к моим дополнениям HaTeX'а, которые я кстати назвал HaTeXExtension. Не шибко хорошее название, но другого пока нет. Я определяю там много таких юникодных операторов:</p>

<p>``` haskell</p>

<pre><code> a ≤ b = a &lt;&gt; leq &lt;&gt; b
</code></pre>

<p>```</p>

<p>Согласитесь, выражение слева от знака равно выглядит приятнее, чем то, что справа. Поэтому и пример кода, данный вначале будет выглядеть иначе (повторяю для наглядного сравнения). Было:</p>

<p>``` haskell</p>

<pre><code>math $ forall &lt;&gt; x &lt;&gt; from &lt;&gt; "S" &lt;&gt; comma &lt;&gt; space &lt;&gt; f^:2.:(x) &lt;&gt; leq &lt;&gt; 0
</code></pre>

<p>```</p>

<p>Станет:</p>

<p>``` haskell</p>

<pre><code>math $ forall &lt;&gt; x ∈ "S" ¸⎕ f⁀2⁖(x) ≤ 0
</code></pre>

<p>```</p>

<p>А при переходе в нормальный режим с conceal'ом, так и вообще</p>

<p>``` haskell</p>

<pre><code>math $ ∀ ◇ x ∈ "S" ¸⎕ f⁀2⁖(x) ≤ 0
</code></pre>

<p>```</p>

<p>Что выглядит уже не длиннее чем LaTeX'овский вариант, и намного симпатичнее его.
Более того, эта запись совсем немного отличается от математической записи (если не брать во внимание "двумерность" математического синтаксиса).
Для ясности, дам определения этих операторов:</p>

<p>``` haskell</p>

<pre><code>a ∈ b = a &lt;&gt; from &lt;&gt; b       -- from это \in 
a ≤ b = a &lt;&gt; leq &lt;&gt; b
</code></pre>

<p>```</p>

<p>(другое имя потому что <code>in</code> - ключевое слово в Haskell)</p>

<p>``` haskell</p>

<pre><code>a ¸ b = a &lt;&gt; comma &lt;&gt; b    -- comma это просто ", "
a ⎕ b = a &lt;&gt; space &lt;&gt; b    -- space это \quad
a ¸⎕ b = a ¸ "" ⎕ b        -- а это их комбинация
</code></pre>

<p>```</p>

<p>тут ¸ - это такая красивая арабская загогулинка, похожая на запятую, которую возможно тут особо не разглядишь, но которая у меня в Vim'е с правильным шрифтом отлично смотрится ")</p>

<p>Ну и последний оператор - это как бы "применение функции к аргументам", чтобы писать <code>f.:(x + y)</code> а не <code>f &lt;&gt; "(" &lt;&gt; x + y &lt;&gt; ")"</code> или <code>f &lt;&gt; prn (x+y)</code> (где <code>prn</code> просто окружает аргумент скобочными символами):</p>

<p>``` haskell</p>

<pre><code>(.:) :: LaTeX -&gt; LaTeX -&gt; LaTeX
func .: params = func &lt;&gt; prn params
(⁖) = (.:)     -- просто юникодовский синоним
</code></pre>

<p>```</p>

<h2>Заключение</h2>

<p>Разумеется всё это можно обоснованно покритиковать на тему того, что не всегда удобно набирать эти юникодовские символы и что вообще это никому не нужно, заменять двух-символьный оператор односимвольным, или это можно сделать через conceal чтобы добиться просто визуального эффекта.</p>

<p>Но ящитаю, что это наоборот очень правильно и важно - <em>код должен выглядеть чисто и однородно</em>. И на мой взгляд, эти символы, сокращающие код и зачастую приближающие его к естественной/общепринятой математической нотации, намного меньше нарушают его однородность и прозрачность, чем всякие служебные символы типа слеша в LaTeX'е и этих ужасных фигурных скобочек. И вообще, по-моему нужно расширять синтаксис обычных языков программирования подобным образом - юникод уже никого ведь не удивляет, а если ещё и двумерный синтаксис сделать (как во всяких maple'ах)?....</p>

<p><strong>P.S.</strong> Завтра постараюсь написать пост про то, как я использую Template Haskell в своём HaTeXExtension чтобы "скрэпать свой бойлерплэйт-код" (:
И да, выложу код на гитхаб.</p>
]]></content>
  </entry>
  
</feed>
